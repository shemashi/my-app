{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass Mover {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  move(delta) {\n    const particle = this.particle;\n    particle.bubble.inRange = false;\n    particle.links = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (particle.destroyed) {\n        break;\n      }\n\n      if (plugin.particleUpdate) {\n        plugin.particleUpdate(particle, delta);\n      }\n    }\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(delta);\n    this.moveParallax();\n  }\n\n  moveParticle(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n\n    const container = this.container;\n    const slowFactor = this.getProximitySpeedFactor();\n    const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n    const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n    const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n    const moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n    this.applyPath(delta);\n    const gravityOptions = particlesOptions.move.gravity;\n\n    if (gravityOptions.enable) {\n      particle.velocity.y += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);\n    }\n\n    const decay = 1 - particle.options.move.decay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n\n    if (gravityOptions.enable && velocity.y >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n      velocity.y = gravityOptions.maxSpeed;\n      particle.velocity.y = velocity.y / moveSpeed;\n    }\n\n    particle.position.addTo(velocity);\n\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n\n    const initialPosition = particle.initialPosition;\n    const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n    if (particle.maxDistance) {\n      if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n        particle.misplaced = initialDistance > particle.maxDistance;\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n      } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n        particle.misplaced = false;\n      } else if (particle.misplaced) {\n        if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n          particle.velocity.x *= -Math.random();\n        }\n\n        if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n          particle.velocity.y *= -Math.random();\n        }\n      }\n    }\n  }\n\n  applyPath(delta) {\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n\n    if (!pathEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n\n    let generator = container.pathGenerator;\n\n    if (pathOptions.generator) {\n      const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n      if (customGenerator) {\n        generator = customGenerator;\n      }\n    }\n\n    const path = generator.generate(particle);\n    particle.velocity.addTo(path);\n\n    if (pathOptions.clamp) {\n      particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n    }\n\n    particle.lastPathTime -= particle.pathDelay;\n  }\n\n  moveParallax() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const particle = this.particle;\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = this.particle.getPosition();\n    const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["C:/Users/Shema/Desktop/PortfolioWebsite/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","constructor","container","particle","move","delta","bubble","inRange","links","plugin","plugins","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","options","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","retina","reduceFactor","maxSize","sizeValue","sizeFactor","size","getRadius","factor","applyPath","gravityOptions","gravity","velocity","y","acceleration","decay","multTo","mult","maxSpeed","position","addTo","vibrate","x","Math","sin","cos","initialPosition","initialDistance","NumberUtils","getDistance","maxDistance","misplaced","random","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n        const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        this.applyPath(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        if (gravityOptions.enable) {\n            particle.velocity.y += (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = 1 - particle.options.move.decay;\n        particle.velocity.multTo(decay);\n        const velocity = particle.velocity.mult(moveSpeed);\n        if (gravityOptions.enable && velocity.y >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n            velocity.y = gravityOptions.maxSpeed;\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n        particle.position.addTo(velocity);\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.x < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.x > 0)) {\n                    particle.velocity.x *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.y < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.y > 0)) {\n                    particle.velocity.y *= -Math.random();\n                }\n            }\n        }\n    }\n    applyPath(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        let generator = container.pathGenerator;\n        if (pathOptions.generator) {\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n            if (customGenerator) {\n                generator = customGenerator;\n            }\n        }\n        const path = generator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}